% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rational-class.R
\docType{methods}
\name{rational-class}
\alias{rational-class}
\alias{rational}
\alias{length,rationalS4-method}
\alias{length.rationalS3}
\alias{length.rationalR6}
\alias{[,rationalS4-method}
\alias{[<-,rationalS4-method}
\alias{[[,rationalS4-method}
\alias{[[<-,rationalS4-method}
\alias{[.rationalS3}
\alias{[<-.rationalS3}
\alias{[[.rationalS3}
\alias{[[<-.rationalS3}
\alias{[.rationalR6}
\alias{[<-.rationalR6}
\alias{[[.rationalR6}
\alias{[[<-.rationalR6}
\alias{print,rationalS4-method}
\alias{show,rationalS4-method}
\alias{print.rationalS3}
\alias{show.rationalS3}
\alias{print.rationalR6}
\alias{show.rationalR6}
\title{Rational Number Classes}
\usage{
rational(n, d, method = "R6")

\S4method{length}{rationalS4}(x)

\method{length}{rationalS3}(x, ...)

\method{length}{rationalR6}(x, ...)

\S4method{[}{rationalS4}(x, i, j, ..., drop = TRUE)

\S4method{[}{rationalS4}(x, i, j, ...) <- value

\S4method{[[}{rationalS4}(x, i, ..., drop)

\S4method{[[}{rationalS4}(x, i, j, ...) <- value

\method{[}{rationalS3}(x, i, j, ..., drop)

\method{[}{rationalS3}(x, i, j, ...) <- value

\method{[[}{rationalS3}(x, i, j, ..., drop)

\method{[[}{rationalS3}(x, i, j, ...) <- value

\method{[}{rationalR6}(x, i, j, ..., drop)

\method{[}{rationalR6}(x, i, j, ...) <- value

\method{[[}{rationalR6}(x, i, j, ..., drop)

\method{[[}{rationalR6}(x, i, j, ...) <- value

\S4method{print}{rationalS4}(x)

\S4method{show}{rationalS4}(object)

print.rationalS3(x)

show.rationalS3(x)

print.rationalR6(x)

show.rationalR6(x)
}
\arguments{
\item{n}{the numerator}

\item{d}{the denominator}

\item{method}{a length = 1 character vector.  One of "R6" (default), "S3", "S4"}

\item{x}{the rational number}

\item{...}{indices specifying elements to extract or replace. Indices are numeric or character vectors or empty (missing) or NULL.}

\item{i}{index specifying elements}

\item{j}{index specifying elements}

\item{drop}{For matrices and arrays. If TRUE the result is coerced to the lowest possible dimension (see the examples). This only works for extracting elements, not for the replacement. See drop for further details.}

\item{value}{the replacement value}

\item{object}{the object to show}
}
\value{
the desired instance of the rational class
}
\description{
An S3, S4, and R6 class for a rational number
\itemize{
   \item rationalS3 - access fields with the '$' operator.
   \item rationalS4 - access fields with the '@' operator.
   \item rationalR6 - internal elements are private, so fields are accessed with accessor methods,
     \code{$getNumerator(), $getDenominator(), $getValue()}
}
The classes are designed to be used in a similar way to integers and numerics in R.

generator rational number of class \code{rationalS3}, \code{rationalS4},
and \code{rationalR6}.  Each type of class has advantages and disadvantages
in performance and flexibility
}
\section{Fields}{

\describe{
\item{\code{n,d,v}}{the numerator, denominator, and value field of the S3 class}
}}

\section{Slots}{

\describe{
\item{\code{n}}{the numerator of the S4 class}

\item{\code{d}}{the denominator of the S4 class}

\item{\code{v}}{the \code{numeric} value of the S4 class}
}}

\note{
note that \code{Inf}, \code{NA}, \code{NaN}, and \code{NULL} all fail
on is.integer() and are not permitted
}
\examples{
 a <- rational(1L, 3L, method="S3")
 stopifnot(a$n == 1L && a$d == 3L && abs(a$v - 1/3) < 1E-12)
 stopifnot(class(a) == "rationalS3")
 b <- rational(2L, 5L, method="S4")
 stopifnot(b@n == 2L && b@d == 5L && abs(b@v - 2/5) < 1E-12)
 stopifnot(class(b) == "rationalS4" && isS4(b) && is(b, "rationalS4"))
 d <- rational(3L, 7L, method="R6")
 stopifnot(d$getNumerator() == 3L && d$getDenominator() == 7L && abs(d$getValue() - 3/7) < 1E-12)
 stopifnot(class(d)[1] == "rationalR6" && is(d, "rationalR6") && is(d, "R6"))
  a <- rational(c(3L, 5L, 6L), c(4L, 5L, 7L), "S4")
  stopifnot(length(a) == 3)
  a <- rational(c(3L, 5L, 6L), c(4L, 5L, 7L), "S3")
  stopifnot(length(a) == 3)
  a <- rational(c(3L, 5L, 6L), c(4L, 5L, 7L), "R6")
  stopifnot(length(a) == 3)
  a <- rational(c(3L, 5L, 6L), c(4L, 5L, 7L), "S4")
  stopifnot(a[2]@n == 5L)
  stopifnot(all(a[2:3]@n == c(5,6)))
  a <- rational(c(3L, 5L, 6L), c(4L, 5L, 7L), "S3")
  stopifnot(a[2]$n == 5L)
  stopifnot(all(a[2:3]$n == c(5,6)))
  a <- rational(c(3L, 5L, 6L), c(4L, 5L, 7L), "R6")
  stopifnot(a[2]$getNumerator() == 5L)
  stopifnot(all(a[2:3]$n == c(5,6)))
}
\seealso{
\code{\link{Extract}} for more full descriptions
}
